#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def subscribeToLineUpdates(self, line_ids, update_interval_seconds):
        """
        Start real-time updates for specific lines
        @param line_ids: List of line IDs to subscribe to
        @param update_interval_seconds: Update frequency in seconds (default: 10)
        @returns: Subscription ID for managing the subscription
        @throws: InvalidLineException if line not supported
        @throws: MTAServiceException for other errors

        Parameters:
         - line_ids
         - update_interval_seconds

        """
        pass

    def unsubscribeFromUpdates(self, subscription_id):
        """
        Stop real-time updates for a subscription
        @param subscription_id: ID returned from subscribeToLineUpdates
        @throws: MTAServiceException for service errors

        Parameters:
         - subscription_id

        """
        pass

    def getActiveSubscriptions(self):
        """
        Get active subscription information
        @returns: List of active subscription IDs

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def subscribeToLineUpdates(self, line_ids, update_interval_seconds):
        """
        Start real-time updates for specific lines
        @param line_ids: List of line IDs to subscribe to
        @param update_interval_seconds: Update frequency in seconds (default: 10)
        @returns: Subscription ID for managing the subscription
        @throws: InvalidLineException if line not supported
        @throws: MTAServiceException for other errors

        Parameters:
         - line_ids
         - update_interval_seconds

        """
        self.send_subscribeToLineUpdates(line_ids, update_interval_seconds)
        return self.recv_subscribeToLineUpdates()

    def send_subscribeToLineUpdates(self, line_ids, update_interval_seconds):
        self._oprot.writeMessageBegin('subscribeToLineUpdates', TMessageType.CALL, self._seqid)
        args = subscribeToLineUpdates_args()
        args.line_ids = line_ids
        args.update_interval_seconds = update_interval_seconds
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_subscribeToLineUpdates(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = subscribeToLineUpdates_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.invalid_line is not None:
            raise result.invalid_line
        if result.service_error is not None:
            raise result.service_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "subscribeToLineUpdates failed: unknown result")

    def unsubscribeFromUpdates(self, subscription_id):
        """
        Stop real-time updates for a subscription
        @param subscription_id: ID returned from subscribeToLineUpdates
        @throws: MTAServiceException for service errors

        Parameters:
         - subscription_id

        """
        self.send_unsubscribeFromUpdates(subscription_id)
        self.recv_unsubscribeFromUpdates()

    def send_unsubscribeFromUpdates(self, subscription_id):
        self._oprot.writeMessageBegin('unsubscribeFromUpdates', TMessageType.CALL, self._seqid)
        args = unsubscribeFromUpdates_args()
        args.subscription_id = subscription_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_unsubscribeFromUpdates(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = unsubscribeFromUpdates_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.service_error is not None:
            raise result.service_error
        return

    def getActiveSubscriptions(self):
        """
        Get active subscription information
        @returns: List of active subscription IDs

        """
        self.send_getActiveSubscriptions()
        return self.recv_getActiveSubscriptions()

    def send_getActiveSubscriptions(self):
        self._oprot.writeMessageBegin('getActiveSubscriptions', TMessageType.CALL, self._seqid)
        args = getActiveSubscriptions_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getActiveSubscriptions(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getActiveSubscriptions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getActiveSubscriptions failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["subscribeToLineUpdates"] = Processor.process_subscribeToLineUpdates
        self._processMap["unsubscribeFromUpdates"] = Processor.process_unsubscribeFromUpdates
        self._processMap["getActiveSubscriptions"] = Processor.process_getActiveSubscriptions
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_subscribeToLineUpdates(self, seqid, iprot, oprot):
        args = subscribeToLineUpdates_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = subscribeToLineUpdates_result()
        try:
            result.success = self._handler.subscribeToLineUpdates(args.line_ids, args.update_interval_seconds)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidLineException as invalid_line:
            msg_type = TMessageType.REPLY
            result.invalid_line = invalid_line
        except MTAServiceException as service_error:
            msg_type = TMessageType.REPLY
            result.service_error = service_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("subscribeToLineUpdates", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_unsubscribeFromUpdates(self, seqid, iprot, oprot):
        args = unsubscribeFromUpdates_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = unsubscribeFromUpdates_result()
        try:
            self._handler.unsubscribeFromUpdates(args.subscription_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except MTAServiceException as service_error:
            msg_type = TMessageType.REPLY
            result.service_error = service_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("unsubscribeFromUpdates", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getActiveSubscriptions(self, seqid, iprot, oprot):
        args = getActiveSubscriptions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getActiveSubscriptions_result()
        try:
            result.success = self._handler.getActiveSubscriptions()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getActiveSubscriptions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class subscribeToLineUpdates_args(object):
    """
    Attributes:
     - line_ids
     - update_interval_seconds

    """


    def __init__(self, line_ids=None, update_interval_seconds=None,):
        self.line_ids = line_ids
        self.update_interval_seconds = update_interval_seconds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.line_ids = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.line_ids.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.update_interval_seconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('subscribeToLineUpdates_args')
        if self.line_ids is not None:
            oprot.writeFieldBegin('line_ids', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.line_ids))
            for iter76 in self.line_ids:
                oprot.writeString(iter76.encode('utf-8') if sys.version_info[0] == 2 else iter76)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.update_interval_seconds is not None:
            oprot.writeFieldBegin('update_interval_seconds', TType.I32, 2)
            oprot.writeI32(self.update_interval_seconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(subscribeToLineUpdates_args)
subscribeToLineUpdates_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'line_ids', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.I32, 'update_interval_seconds', None, None, ),  # 2
)


class subscribeToLineUpdates_result(object):
    """
    Attributes:
     - success
     - invalid_line
     - service_error

    """


    def __init__(self, success=None, invalid_line=None, service_error=None,):
        self.success = success
        self.invalid_line = invalid_line
        self.service_error = service_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.invalid_line = InvalidLineException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.service_error = MTAServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('subscribeToLineUpdates_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.invalid_line is not None:
            oprot.writeFieldBegin('invalid_line', TType.STRUCT, 1)
            self.invalid_line.write(oprot)
            oprot.writeFieldEnd()
        if self.service_error is not None:
            oprot.writeFieldBegin('service_error', TType.STRUCT, 2)
            self.service_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(subscribeToLineUpdates_result)
subscribeToLineUpdates_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'invalid_line', [InvalidLineException, None], None, ),  # 1
    (2, TType.STRUCT, 'service_error', [MTAServiceException, None], None, ),  # 2
)


class unsubscribeFromUpdates_args(object):
    """
    Attributes:
     - subscription_id

    """


    def __init__(self, subscription_id=None,):
        self.subscription_id = subscription_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.subscription_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('unsubscribeFromUpdates_args')
        if self.subscription_id is not None:
            oprot.writeFieldBegin('subscription_id', TType.STRING, 1)
            oprot.writeString(self.subscription_id.encode('utf-8') if sys.version_info[0] == 2 else self.subscription_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(unsubscribeFromUpdates_args)
unsubscribeFromUpdates_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'subscription_id', 'UTF8', None, ),  # 1
)


class unsubscribeFromUpdates_result(object):
    """
    Attributes:
     - service_error

    """


    def __init__(self, service_error=None,):
        self.service_error = service_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.service_error = MTAServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('unsubscribeFromUpdates_result')
        if self.service_error is not None:
            oprot.writeFieldBegin('service_error', TType.STRUCT, 1)
            self.service_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(unsubscribeFromUpdates_result)
unsubscribeFromUpdates_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'service_error', [MTAServiceException, None], None, ),  # 1
)


class getActiveSubscriptions_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getActiveSubscriptions_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getActiveSubscriptions_args)
getActiveSubscriptions_args.thrift_spec = (
)


class getActiveSubscriptions_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.success.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getActiveSubscriptions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for iter83 in self.success:
                oprot.writeString(iter83.encode('utf-8') if sys.version_info[0] == 2 else iter83)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getActiveSubscriptions_result)
getActiveSubscriptions_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING, 'UTF8', False), None, ),  # 0
)
fix_spec(all_structs)
del all_structs
