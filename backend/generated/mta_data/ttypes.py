#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Direction(object):
    NORTH = 1
    SOUTH = 2
    EAST = 3
    WEST = 4
    UNKNOWN = 5

    _VALUES_TO_NAMES = {
        1: "NORTH",
        2: "SOUTH",
        3: "EAST",
        4: "WEST",
        5: "UNKNOWN",
    }

    _NAMES_TO_VALUES = {
        "NORTH": 1,
        "SOUTH": 2,
        "EAST": 3,
        "WEST": 4,
        "UNKNOWN": 5,
    }


class LineColor(object):
    YELLOW = 1
    RED = 2
    BLUE = 3
    GREEN = 4
    ORANGE = 5
    PURPLE = 6

    _VALUES_TO_NAMES = {
        1: "YELLOW",
        2: "RED",
        3: "BLUE",
        4: "GREEN",
        5: "ORANGE",
        6: "PURPLE",
    }

    _NAMES_TO_VALUES = {
        "YELLOW": 1,
        "RED": 2,
        "BLUE": 3,
        "GREEN": 4,
        "ORANGE": 5,
        "PURPLE": 6,
    }


class MessageType(object):
    TRAIN_UPDATE = 1
    STATION_UPDATE = 2
    LINE_UPDATE = 3
    FULL_REFRESH = 4
    ERROR = 5

    _VALUES_TO_NAMES = {
        1: "TRAIN_UPDATE",
        2: "STATION_UPDATE",
        3: "LINE_UPDATE",
        4: "FULL_REFRESH",
        5: "ERROR",
    }

    _NAMES_TO_VALUES = {
        "TRAIN_UPDATE": 1,
        "STATION_UPDATE": 2,
        "LINE_UPDATE": 3,
        "FULL_REFRESH": 4,
        "ERROR": 5,
    }


class Coordinate(object):
    """
    Attributes:
     - latitude
     - longitude

    """


    def __init__(self, latitude=None, longitude=None,):
        self.latitude = latitude
        self.longitude = longitude

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Coordinate')
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Station(object):
    """
    Attributes:
     - station_id
     - name
     - location
     - line_ids
     - is_terminus
     - accessibility_info

    """


    def __init__(self, station_id=None, name=None, location=None, line_ids=None, is_terminus=None, accessibility_info=None,):
        self.station_id = station_id
        self.name = name
        self.location = location
        self.line_ids = line_ids
        self.is_terminus = is_terminus
        self.accessibility_info = accessibility_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.station_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.location = Coordinate()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.line_ids = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.line_ids.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.is_terminus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.accessibility_info = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Station')
        if self.station_id is not None:
            oprot.writeFieldBegin('station_id', TType.STRING, 1)
            oprot.writeString(self.station_id.encode('utf-8') if sys.version_info[0] == 2 else self.station_id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 3)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.line_ids is not None:
            oprot.writeFieldBegin('line_ids', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.line_ids))
            for iter6 in self.line_ids:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.is_terminus is not None:
            oprot.writeFieldBegin('is_terminus', TType.BOOL, 5)
            oprot.writeBool(self.is_terminus)
            oprot.writeFieldEnd()
        if self.accessibility_info is not None:
            oprot.writeFieldBegin('accessibility_info', TType.STRING, 6)
            oprot.writeString(self.accessibility_info.encode('utf-8') if sys.version_info[0] == 2 else self.accessibility_info)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Train(object):
    """
    Attributes:
     - train_id
     - line_id
     - current_position
     - direction
     - current_station_id
     - next_station_id
     - timestamp
     - speed_mph
     - trip_id
     - delay_seconds
     - line_color

    """


    def __init__(self, train_id=None, line_id=None, current_position=None, direction=None, current_station_id=None, next_station_id=None, timestamp=None, speed_mph=None, trip_id=None, delay_seconds=None, line_color=None,):
        self.train_id = train_id
        self.line_id = line_id
        self.current_position = current_position
        self.direction = direction
        self.current_station_id = current_station_id
        self.next_station_id = next_station_id
        self.timestamp = timestamp
        self.speed_mph = speed_mph
        self.trip_id = trip_id
        self.delay_seconds = delay_seconds
        self.line_color = line_color

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.train_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.line_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.current_position = Coordinate()
                    self.current_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.current_station_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.next_station_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.speed_mph = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.trip_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.delay_seconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.line_color = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Train')
        if self.train_id is not None:
            oprot.writeFieldBegin('train_id', TType.STRING, 1)
            oprot.writeString(self.train_id.encode('utf-8') if sys.version_info[0] == 2 else self.train_id)
            oprot.writeFieldEnd()
        if self.line_id is not None:
            oprot.writeFieldBegin('line_id', TType.STRING, 2)
            oprot.writeString(self.line_id.encode('utf-8') if sys.version_info[0] == 2 else self.line_id)
            oprot.writeFieldEnd()
        if self.current_position is not None:
            oprot.writeFieldBegin('current_position', TType.STRUCT, 3)
            self.current_position.write(oprot)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 4)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        if self.current_station_id is not None:
            oprot.writeFieldBegin('current_station_id', TType.STRING, 5)
            oprot.writeString(self.current_station_id.encode('utf-8') if sys.version_info[0] == 2 else self.current_station_id)
            oprot.writeFieldEnd()
        if self.next_station_id is not None:
            oprot.writeFieldBegin('next_station_id', TType.STRING, 6)
            oprot.writeString(self.next_station_id.encode('utf-8') if sys.version_info[0] == 2 else self.next_station_id)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 7)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.speed_mph is not None:
            oprot.writeFieldBegin('speed_mph', TType.DOUBLE, 8)
            oprot.writeDouble(self.speed_mph)
            oprot.writeFieldEnd()
        if self.trip_id is not None:
            oprot.writeFieldBegin('trip_id', TType.STRING, 9)
            oprot.writeString(self.trip_id.encode('utf-8') if sys.version_info[0] == 2 else self.trip_id)
            oprot.writeFieldEnd()
        if self.delay_seconds is not None:
            oprot.writeFieldBegin('delay_seconds', TType.I32, 10)
            oprot.writeI32(self.delay_seconds)
            oprot.writeFieldEnd()
        if self.line_color is not None:
            oprot.writeFieldBegin('line_color', TType.I32, 11)
            oprot.writeI32(self.line_color)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LineSegment(object):
    """
    Attributes:
     - from_station_id
     - to_station_id
     - path_coordinates
     - line_color
     - distance_miles

    """


    def __init__(self, from_station_id=None, to_station_id=None, path_coordinates=None, line_color=None, distance_miles=None,):
        self.from_station_id = from_station_id
        self.to_station_id = to_station_id
        self.path_coordinates = path_coordinates
        self.line_color = line_color
        self.distance_miles = distance_miles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.from_station_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.to_station_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.path_coordinates = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Coordinate()
                        _elem12.read(iprot)
                        self.path_coordinates.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.line_color = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.distance_miles = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LineSegment')
        if self.from_station_id is not None:
            oprot.writeFieldBegin('from_station_id', TType.STRING, 1)
            oprot.writeString(self.from_station_id.encode('utf-8') if sys.version_info[0] == 2 else self.from_station_id)
            oprot.writeFieldEnd()
        if self.to_station_id is not None:
            oprot.writeFieldBegin('to_station_id', TType.STRING, 2)
            oprot.writeString(self.to_station_id.encode('utf-8') if sys.version_info[0] == 2 else self.to_station_id)
            oprot.writeFieldEnd()
        if self.path_coordinates is not None:
            oprot.writeFieldBegin('path_coordinates', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.path_coordinates))
            for iter13 in self.path_coordinates:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.line_color is not None:
            oprot.writeFieldBegin('line_color', TType.I32, 4)
            oprot.writeI32(self.line_color)
            oprot.writeFieldEnd()
        if self.distance_miles is not None:
            oprot.writeFieldBegin('distance_miles', TType.DOUBLE, 5)
            oprot.writeDouble(self.distance_miles)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SubwayLine(object):
    """
    Attributes:
     - line_id
     - name
     - color
     - stations
     - segments
     - active_trains

    """


    def __init__(self, line_id=None, name=None, color=None, stations=None, segments=None, active_trains=None,):
        self.line_id = line_id
        self.name = name
        self.color = color
        self.stations = stations
        self.segments = segments
        self.active_trains = active_trains

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.line_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.color = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.stations = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = Station()
                        _elem19.read(iprot)
                        self.stations.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.segments = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = LineSegment()
                        _elem25.read(iprot)
                        self.segments.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.active_trains = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = Train()
                        _elem31.read(iprot)
                        self.active_trains.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SubwayLine')
        if self.line_id is not None:
            oprot.writeFieldBegin('line_id', TType.STRING, 1)
            oprot.writeString(self.line_id.encode('utf-8') if sys.version_info[0] == 2 else self.line_id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.I32, 3)
            oprot.writeI32(self.color)
            oprot.writeFieldEnd()
        if self.stations is not None:
            oprot.writeFieldBegin('stations', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.stations))
            for iter32 in self.stations:
                iter32.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.segments is not None:
            oprot.writeFieldBegin('segments', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.segments))
            for iter33 in self.segments:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.active_trains is not None:
            oprot.writeFieldBegin('active_trains', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.active_trains))
            for iter34 in self.active_trains:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RealTimeFeed(object):
    """
    Attributes:
     - timestamp
     - lines
     - total_active_trains
     - feed_version

    """


    def __init__(self, timestamp=None, lines=None, total_active_trains=None, feed_version=None,):
        self.timestamp = timestamp
        self.lines = lines
        self.total_active_trains = total_active_trains
        self.feed_version = feed_version

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.lines = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = SubwayLine()
                        _elem40.read(iprot)
                        self.lines.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.total_active_trains = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.feed_version = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealTimeFeed')
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 1)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.lines is not None:
            oprot.writeFieldBegin('lines', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.lines))
            for iter41 in self.lines:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.total_active_trains is not None:
            oprot.writeFieldBegin('total_active_trains', TType.I32, 3)
            oprot.writeI32(self.total_active_trains)
            oprot.writeFieldEnd()
        if self.feed_version is not None:
            oprot.writeFieldBegin('feed_version', TType.STRING, 4)
            oprot.writeString(self.feed_version.encode('utf-8') if sys.version_info[0] == 2 else self.feed_version)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WebSocketMessage(object):
    """
    Attributes:
     - type
     - timestamp
     - train_data
     - station_data
     - line_data
     - full_data
     - error_message

    """


    def __init__(self, type=None, timestamp=None, train_data=None, station_data=None, line_data=None, full_data=None, error_message=None,):
        self.type = type
        self.timestamp = timestamp
        self.train_data = train_data
        self.station_data = station_data
        self.line_data = line_data
        self.full_data = full_data
        self.error_message = error_message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.train_data = Train()
                    self.train_data.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.station_data = Station()
                    self.station_data.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.line_data = SubwayLine()
                    self.line_data.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.full_data = RealTimeFeed()
                    self.full_data.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.error_message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WebSocketMessage')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 2)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.train_data is not None:
            oprot.writeFieldBegin('train_data', TType.STRUCT, 3)
            self.train_data.write(oprot)
            oprot.writeFieldEnd()
        if self.station_data is not None:
            oprot.writeFieldBegin('station_data', TType.STRUCT, 4)
            self.station_data.write(oprot)
            oprot.writeFieldEnd()
        if self.line_data is not None:
            oprot.writeFieldBegin('line_data', TType.STRUCT, 5)
            self.line_data.write(oprot)
            oprot.writeFieldEnd()
        if self.full_data is not None:
            oprot.writeFieldBegin('full_data', TType.STRUCT, 6)
            self.full_data.write(oprot)
            oprot.writeFieldEnd()
        if self.error_message is not None:
            oprot.writeFieldBegin('error_message', TType.STRING, 7)
            oprot.writeString(self.error_message.encode('utf-8') if sys.version_info[0] == 2 else self.error_message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ApiResponse(object):
    """
    Attributes:
     - success
     - error_message
     - data
     - timestamp

    """


    def __init__(self, success=None, error_message=None, data=None, timestamp=None,):
        self.success = success
        self.error_message = error_message
        self.data = data
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.data = RealTimeFeed()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ApiResponse')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.error_message is not None:
            oprot.writeFieldBegin('error_message', TType.STRING, 2)
            oprot.writeString(self.error_message.encode('utf-8') if sys.version_info[0] == 2 else self.error_message)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 3)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 4)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MTAServiceException(TException):
    """
    Attributes:
     - message
     - error_code

    """


    def __init__(self, message=None, error_code=None,):
        super(MTAServiceException, self).__setattr__('message', message)
        super(MTAServiceException, self).__setattr__('error_code', error_code)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, self.error_code, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        error_code = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    error_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            error_code=error_code,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MTAServiceException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I32, 2)
            oprot.writeI32(self.error_code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InvalidLineException(TException):
    """
    Attributes:
     - message
     - line_id

    """


    def __init__(self, message=None, line_id=None,):
        super(InvalidLineException, self).__setattr__('message', message)
        super(InvalidLineException, self).__setattr__('line_id', line_id)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, self.line_id, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        line_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    line_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            line_id=line_id,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidLineException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.line_id is not None:
            oprot.writeFieldBegin('line_id', TType.STRING, 2)
            oprot.writeString(self.line_id.encode('utf-8') if sys.version_info[0] == 2 else self.line_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FeedUnavailableException(TException):
    """
    Attributes:
     - message
     - retry_after_seconds

    """


    def __init__(self, message=None, retry_after_seconds=None,):
        super(FeedUnavailableException, self).__setattr__('message', message)
        super(FeedUnavailableException, self).__setattr__('retry_after_seconds', retry_after_seconds)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, self.retry_after_seconds, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        retry_after_seconds = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    retry_after_seconds = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            retry_after_seconds=retry_after_seconds,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FeedUnavailableException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.retry_after_seconds is not None:
            oprot.writeFieldBegin('retry_after_seconds', TType.I64, 2)
            oprot.writeI64(self.retry_after_seconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Coordinate)
Coordinate.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'latitude', None, None, ),  # 1
    (2, TType.DOUBLE, 'longitude', None, None, ),  # 2
)
all_structs.append(Station)
Station.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'station_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'location', [Coordinate, None], None, ),  # 3
    (4, TType.LIST, 'line_ids', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.BOOL, 'is_terminus', None, None, ),  # 5
    (6, TType.STRING, 'accessibility_info', 'UTF8', None, ),  # 6
)
all_structs.append(Train)
Train.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'train_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'line_id', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'current_position', [Coordinate, None], None, ),  # 3
    (4, TType.I32, 'direction', None, None, ),  # 4
    (5, TType.STRING, 'current_station_id', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'next_station_id', 'UTF8', None, ),  # 6
    (7, TType.I64, 'timestamp', None, None, ),  # 7
    (8, TType.DOUBLE, 'speed_mph', None, None, ),  # 8
    (9, TType.STRING, 'trip_id', 'UTF8', None, ),  # 9
    (10, TType.I32, 'delay_seconds', None, None, ),  # 10
    (11, TType.I32, 'line_color', None, None, ),  # 11
)
all_structs.append(LineSegment)
LineSegment.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'from_station_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'to_station_id', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'path_coordinates', (TType.STRUCT, [Coordinate, None], False), None, ),  # 3
    (4, TType.I32, 'line_color', None, None, ),  # 4
    (5, TType.DOUBLE, 'distance_miles', None, None, ),  # 5
)
all_structs.append(SubwayLine)
SubwayLine.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'line_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'color', None, None, ),  # 3
    (4, TType.LIST, 'stations', (TType.STRUCT, [Station, None], False), None, ),  # 4
    (5, TType.LIST, 'segments', (TType.STRUCT, [LineSegment, None], False), None, ),  # 5
    (6, TType.LIST, 'active_trains', (TType.STRUCT, [Train, None], False), None, ),  # 6
)
all_structs.append(RealTimeFeed)
RealTimeFeed.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'timestamp', None, None, ),  # 1
    (2, TType.LIST, 'lines', (TType.STRUCT, [SubwayLine, None], False), None, ),  # 2
    (3, TType.I32, 'total_active_trains', None, None, ),  # 3
    (4, TType.STRING, 'feed_version', 'UTF8', None, ),  # 4
)
all_structs.append(WebSocketMessage)
WebSocketMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.I64, 'timestamp', None, None, ),  # 2
    (3, TType.STRUCT, 'train_data', [Train, None], None, ),  # 3
    (4, TType.STRUCT, 'station_data', [Station, None], None, ),  # 4
    (5, TType.STRUCT, 'line_data', [SubwayLine, None], None, ),  # 5
    (6, TType.STRUCT, 'full_data', [RealTimeFeed, None], None, ),  # 6
    (7, TType.STRING, 'error_message', 'UTF8', None, ),  # 7
)
all_structs.append(ApiResponse)
ApiResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
    (2, TType.STRING, 'error_message', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'data', [RealTimeFeed, None], None, ),  # 3
    (4, TType.I64, 'timestamp', None, None, ),  # 4
)
all_structs.append(MTAServiceException)
MTAServiceException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'error_code', None, None, ),  # 2
)
all_structs.append(InvalidLineException)
InvalidLineException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'line_id', 'UTF8', None, ),  # 2
)
all_structs.append(FeedUnavailableException)
FeedUnavailableException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I64, 'retry_after_seconds', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
