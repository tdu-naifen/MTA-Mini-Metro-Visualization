#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def getRealTimeFeed(self, line_ids):
        """
        Get real-time feed data for specific subway lines
        @param line_ids: List of line IDs (e.g., ["N", "Q", "R", "W"])
        @returns: Real-time feed data for requested lines
        @throws: InvalidLineException if line not supported
        @throws: FeedUnavailableException if MTA feed is down
        @throws: MTAServiceException for other errors

        Parameters:
         - line_ids

        """
        pass

    def getAvailableLines(self):
        """
        Get all available subway lines with their static information
        @returns: List of subway lines with stations and segments
        @throws: MTAServiceException for service errors

        """
        pass

    def getStationsForLine(self, line_id):
        """
        Get station information for a specific line
        @param line_id: Line ID (e.g., "N", "Q", "R", "W")
        @returns: List of stations for the line
        @throws: InvalidLineException if line not supported
        @throws: MTAServiceException for other errors

        Parameters:
         - line_id

        """
        pass

    def getActiveTrains(self, line_id):
        """
        Get active trains for a specific line
        @param line_id: Line ID (e.g., "N", "Q", "R", "W")
        @returns: List of active trains on the line
        @throws: InvalidLineException if line not supported
        @throws: FeedUnavailableException if MTA feed is down
        @throws: MTAServiceException for other errors

        Parameters:
         - line_id

        """
        pass

    def healthCheck(self):
        """
        Health check for the service
        @returns: True if service is healthy

        """
        pass

    def getServiceStatus(self):
        """
        Get service status information
        @returns: Service status and feed information

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def getRealTimeFeed(self, line_ids):
        """
        Get real-time feed data for specific subway lines
        @param line_ids: List of line IDs (e.g., ["N", "Q", "R", "W"])
        @returns: Real-time feed data for requested lines
        @throws: InvalidLineException if line not supported
        @throws: FeedUnavailableException if MTA feed is down
        @throws: MTAServiceException for other errors

        Parameters:
         - line_ids

        """
        self.send_getRealTimeFeed(line_ids)
        return self.recv_getRealTimeFeed()

    def send_getRealTimeFeed(self, line_ids):
        self._oprot.writeMessageBegin('getRealTimeFeed', TMessageType.CALL, self._seqid)
        args = getRealTimeFeed_args()
        args.line_ids = line_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRealTimeFeed(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRealTimeFeed_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.invalid_line is not None:
            raise result.invalid_line
        if result.feed_unavailable is not None:
            raise result.feed_unavailable
        if result.service_error is not None:
            raise result.service_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRealTimeFeed failed: unknown result")

    def getAvailableLines(self):
        """
        Get all available subway lines with their static information
        @returns: List of subway lines with stations and segments
        @throws: MTAServiceException for service errors

        """
        self.send_getAvailableLines()
        return self.recv_getAvailableLines()

    def send_getAvailableLines(self):
        self._oprot.writeMessageBegin('getAvailableLines', TMessageType.CALL, self._seqid)
        args = getAvailableLines_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAvailableLines(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAvailableLines_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.service_error is not None:
            raise result.service_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAvailableLines failed: unknown result")

    def getStationsForLine(self, line_id):
        """
        Get station information for a specific line
        @param line_id: Line ID (e.g., "N", "Q", "R", "W")
        @returns: List of stations for the line
        @throws: InvalidLineException if line not supported
        @throws: MTAServiceException for other errors

        Parameters:
         - line_id

        """
        self.send_getStationsForLine(line_id)
        return self.recv_getStationsForLine()

    def send_getStationsForLine(self, line_id):
        self._oprot.writeMessageBegin('getStationsForLine', TMessageType.CALL, self._seqid)
        args = getStationsForLine_args()
        args.line_id = line_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getStationsForLine(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getStationsForLine_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.invalid_line is not None:
            raise result.invalid_line
        if result.service_error is not None:
            raise result.service_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getStationsForLine failed: unknown result")

    def getActiveTrains(self, line_id):
        """
        Get active trains for a specific line
        @param line_id: Line ID (e.g., "N", "Q", "R", "W")
        @returns: List of active trains on the line
        @throws: InvalidLineException if line not supported
        @throws: FeedUnavailableException if MTA feed is down
        @throws: MTAServiceException for other errors

        Parameters:
         - line_id

        """
        self.send_getActiveTrains(line_id)
        return self.recv_getActiveTrains()

    def send_getActiveTrains(self, line_id):
        self._oprot.writeMessageBegin('getActiveTrains', TMessageType.CALL, self._seqid)
        args = getActiveTrains_args()
        args.line_id = line_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getActiveTrains(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getActiveTrains_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.invalid_line is not None:
            raise result.invalid_line
        if result.feed_unavailable is not None:
            raise result.feed_unavailable
        if result.service_error is not None:
            raise result.service_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getActiveTrains failed: unknown result")

    def healthCheck(self):
        """
        Health check for the service
        @returns: True if service is healthy

        """
        self.send_healthCheck()
        return self.recv_healthCheck()

    def send_healthCheck(self):
        self._oprot.writeMessageBegin('healthCheck', TMessageType.CALL, self._seqid)
        args = healthCheck_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_healthCheck(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = healthCheck_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "healthCheck failed: unknown result")

    def getServiceStatus(self):
        """
        Get service status information
        @returns: Service status and feed information

        """
        self.send_getServiceStatus()
        return self.recv_getServiceStatus()

    def send_getServiceStatus(self):
        self._oprot.writeMessageBegin('getServiceStatus', TMessageType.CALL, self._seqid)
        args = getServiceStatus_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getServiceStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getServiceStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getServiceStatus failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["getRealTimeFeed"] = Processor.process_getRealTimeFeed
        self._processMap["getAvailableLines"] = Processor.process_getAvailableLines
        self._processMap["getStationsForLine"] = Processor.process_getStationsForLine
        self._processMap["getActiveTrains"] = Processor.process_getActiveTrains
        self._processMap["healthCheck"] = Processor.process_healthCheck
        self._processMap["getServiceStatus"] = Processor.process_getServiceStatus
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_getRealTimeFeed(self, seqid, iprot, oprot):
        args = getRealTimeFeed_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRealTimeFeed_result()
        try:
            result.success = self._handler.getRealTimeFeed(args.line_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidLineException as invalid_line:
            msg_type = TMessageType.REPLY
            result.invalid_line = invalid_line
        except FeedUnavailableException as feed_unavailable:
            msg_type = TMessageType.REPLY
            result.feed_unavailable = feed_unavailable
        except MTAServiceException as service_error:
            msg_type = TMessageType.REPLY
            result.service_error = service_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRealTimeFeed", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAvailableLines(self, seqid, iprot, oprot):
        args = getAvailableLines_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAvailableLines_result()
        try:
            result.success = self._handler.getAvailableLines()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except MTAServiceException as service_error:
            msg_type = TMessageType.REPLY
            result.service_error = service_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAvailableLines", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getStationsForLine(self, seqid, iprot, oprot):
        args = getStationsForLine_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getStationsForLine_result()
        try:
            result.success = self._handler.getStationsForLine(args.line_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidLineException as invalid_line:
            msg_type = TMessageType.REPLY
            result.invalid_line = invalid_line
        except MTAServiceException as service_error:
            msg_type = TMessageType.REPLY
            result.service_error = service_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getStationsForLine", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getActiveTrains(self, seqid, iprot, oprot):
        args = getActiveTrains_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getActiveTrains_result()
        try:
            result.success = self._handler.getActiveTrains(args.line_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidLineException as invalid_line:
            msg_type = TMessageType.REPLY
            result.invalid_line = invalid_line
        except FeedUnavailableException as feed_unavailable:
            msg_type = TMessageType.REPLY
            result.feed_unavailable = feed_unavailable
        except MTAServiceException as service_error:
            msg_type = TMessageType.REPLY
            result.service_error = service_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getActiveTrains", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_healthCheck(self, seqid, iprot, oprot):
        args = healthCheck_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = healthCheck_result()
        try:
            result.success = self._handler.healthCheck()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("healthCheck", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getServiceStatus(self, seqid, iprot, oprot):
        args = getServiceStatus_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getServiceStatus_result()
        try:
            result.success = self._handler.getServiceStatus()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getServiceStatus", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class getRealTimeFeed_args(object):
    """
    Attributes:
     - line_ids

    """


    def __init__(self, line_ids=None,):
        self.line_ids = line_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.line_ids = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.line_ids.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRealTimeFeed_args')
        if self.line_ids is not None:
            oprot.writeFieldBegin('line_ids', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.line_ids))
            for iter48 in self.line_ids:
                oprot.writeString(iter48.encode('utf-8') if sys.version_info[0] == 2 else iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRealTimeFeed_args)
getRealTimeFeed_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'line_ids', (TType.STRING, 'UTF8', False), None, ),  # 1
)


class getRealTimeFeed_result(object):
    """
    Attributes:
     - success
     - invalid_line
     - feed_unavailable
     - service_error

    """


    def __init__(self, success=None, invalid_line=None, feed_unavailable=None, service_error=None,):
        self.success = success
        self.invalid_line = invalid_line
        self.feed_unavailable = feed_unavailable
        self.service_error = service_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = RealTimeFeed()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.invalid_line = InvalidLineException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.feed_unavailable = FeedUnavailableException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.service_error = MTAServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRealTimeFeed_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.invalid_line is not None:
            oprot.writeFieldBegin('invalid_line', TType.STRUCT, 1)
            self.invalid_line.write(oprot)
            oprot.writeFieldEnd()
        if self.feed_unavailable is not None:
            oprot.writeFieldBegin('feed_unavailable', TType.STRUCT, 2)
            self.feed_unavailable.write(oprot)
            oprot.writeFieldEnd()
        if self.service_error is not None:
            oprot.writeFieldBegin('service_error', TType.STRUCT, 3)
            self.service_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRealTimeFeed_result)
getRealTimeFeed_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [RealTimeFeed, None], None, ),  # 0
    (1, TType.STRUCT, 'invalid_line', [InvalidLineException, None], None, ),  # 1
    (2, TType.STRUCT, 'feed_unavailable', [FeedUnavailableException, None], None, ),  # 2
    (3, TType.STRUCT, 'service_error', [MTAServiceException, None], None, ),  # 3
)


class getAvailableLines_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAvailableLines_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAvailableLines_args)
getAvailableLines_args.thrift_spec = (
)


class getAvailableLines_result(object):
    """
    Attributes:
     - success
     - service_error

    """


    def __init__(self, success=None, service_error=None,):
        self.success = success
        self.service_error = service_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = SubwayLine()
                        _elem54.read(iprot)
                        self.success.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.service_error = MTAServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAvailableLines_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter55 in self.success:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.service_error is not None:
            oprot.writeFieldBegin('service_error', TType.STRUCT, 1)
            self.service_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAvailableLines_result)
getAvailableLines_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SubwayLine, None], False), None, ),  # 0
    (1, TType.STRUCT, 'service_error', [MTAServiceException, None], None, ),  # 1
)


class getStationsForLine_args(object):
    """
    Attributes:
     - line_id

    """


    def __init__(self, line_id=None,):
        self.line_id = line_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.line_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getStationsForLine_args')
        if self.line_id is not None:
            oprot.writeFieldBegin('line_id', TType.STRING, 1)
            oprot.writeString(self.line_id.encode('utf-8') if sys.version_info[0] == 2 else self.line_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getStationsForLine_args)
getStationsForLine_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'line_id', 'UTF8', None, ),  # 1
)


class getStationsForLine_result(object):
    """
    Attributes:
     - success
     - invalid_line
     - service_error

    """


    def __init__(self, success=None, invalid_line=None, service_error=None,):
        self.success = success
        self.invalid_line = invalid_line
        self.service_error = service_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = Station()
                        _elem61.read(iprot)
                        self.success.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.invalid_line = InvalidLineException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.service_error = MTAServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getStationsForLine_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter62 in self.success:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.invalid_line is not None:
            oprot.writeFieldBegin('invalid_line', TType.STRUCT, 1)
            self.invalid_line.write(oprot)
            oprot.writeFieldEnd()
        if self.service_error is not None:
            oprot.writeFieldBegin('service_error', TType.STRUCT, 2)
            self.service_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getStationsForLine_result)
getStationsForLine_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Station, None], False), None, ),  # 0
    (1, TType.STRUCT, 'invalid_line', [InvalidLineException, None], None, ),  # 1
    (2, TType.STRUCT, 'service_error', [MTAServiceException, None], None, ),  # 2
)


class getActiveTrains_args(object):
    """
    Attributes:
     - line_id

    """


    def __init__(self, line_id=None,):
        self.line_id = line_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.line_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getActiveTrains_args')
        if self.line_id is not None:
            oprot.writeFieldBegin('line_id', TType.STRING, 1)
            oprot.writeString(self.line_id.encode('utf-8') if sys.version_info[0] == 2 else self.line_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getActiveTrains_args)
getActiveTrains_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'line_id', 'UTF8', None, ),  # 1
)


class getActiveTrains_result(object):
    """
    Attributes:
     - success
     - invalid_line
     - feed_unavailable
     - service_error

    """


    def __init__(self, success=None, invalid_line=None, feed_unavailable=None, service_error=None,):
        self.success = success
        self.invalid_line = invalid_line
        self.feed_unavailable = feed_unavailable
        self.service_error = service_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = Train()
                        _elem68.read(iprot)
                        self.success.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.invalid_line = InvalidLineException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.feed_unavailable = FeedUnavailableException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.service_error = MTAServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getActiveTrains_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter69 in self.success:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.invalid_line is not None:
            oprot.writeFieldBegin('invalid_line', TType.STRUCT, 1)
            self.invalid_line.write(oprot)
            oprot.writeFieldEnd()
        if self.feed_unavailable is not None:
            oprot.writeFieldBegin('feed_unavailable', TType.STRUCT, 2)
            self.feed_unavailable.write(oprot)
            oprot.writeFieldEnd()
        if self.service_error is not None:
            oprot.writeFieldBegin('service_error', TType.STRUCT, 3)
            self.service_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getActiveTrains_result)
getActiveTrains_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Train, None], False), None, ),  # 0
    (1, TType.STRUCT, 'invalid_line', [InvalidLineException, None], None, ),  # 1
    (2, TType.STRUCT, 'feed_unavailable', [FeedUnavailableException, None], None, ),  # 2
    (3, TType.STRUCT, 'service_error', [MTAServiceException, None], None, ),  # 3
)


class healthCheck_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('healthCheck_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(healthCheck_args)
healthCheck_args.thrift_spec = (
)


class healthCheck_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('healthCheck_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(healthCheck_result)
healthCheck_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class getServiceStatus_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getServiceStatus_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getServiceStatus_args)
getServiceStatus_args.thrift_spec = (
)


class getServiceStatus_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getServiceStatus_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getServiceStatus_result)
getServiceStatus_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)
fix_spec(all_structs)
del all_structs
