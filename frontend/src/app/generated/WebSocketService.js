//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

MtaData.WebSocketService_subscribeToLineUpdates_args = function(args) {
        this.line_ids = null;
        this.update_interval_seconds = null;
        if (args) {
          if (args.line_ids !== undefined && args.line_ids !== null) {
            this.line_ids = Thrift.copyList(args.line_ids, [null]);
          }
          if (args.update_interval_seconds !== undefined && args.update_interval_seconds !== null) {
            this.update_interval_seconds = args.update_interval_seconds;
          }
        }
      };
MtaData.WebSocketService_subscribeToLineUpdates_args.prototype = {};
      MtaData.WebSocketService_subscribeToLineUpdates_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true) {
          var ret = input.readFieldBegin();
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid) {
            case 1:
            if (ftype == Thrift.Type.LIST) {
              this.line_ids = [];
              var _rtmp351 = input.readListBegin();
              var _size50 = _rtmp351.size || 0;
              for (var _i52 = 0; _i52 < _size50; ++_i52) {
                var elem53 = null;
                elem53 = input.readString().value;
                this.line_ids.push(elem53);
              }
              input.readListEnd();
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.I32) {
              this.update_interval_seconds = input.readI32().value;
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

      MtaData.WebSocketService_subscribeToLineUpdates_args.prototype.write = function(output) {
        output.writeStructBegin('WebSocketService_subscribeToLineUpdates_args');
        if (this.line_ids !== null && this.line_ids !== undefined) {
          output.writeFieldBegin('line_ids', Thrift.Type.LIST, 1);
          output.writeListBegin(Thrift.Type.STRING, this.line_ids.length);
          for (var iter54 in this.line_ids) {
            if (this.line_ids.hasOwnProperty(iter54)) {
              iter54 = this.line_ids[iter54];
              output.writeString(iter54);
            }
          }
          output.writeListEnd();
          output.writeFieldEnd();
        }
        if (this.update_interval_seconds !== null && this.update_interval_seconds !== undefined) {
          output.writeFieldBegin('update_interval_seconds', Thrift.Type.I32, 2);
          output.writeI32(this.update_interval_seconds);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

MtaData.WebSocketService_subscribeToLineUpdates_result = function(args) {
        this.success = null;
        this.invalid_line = null;
        this.service_error = null;
        if (args instanceof MtaData.InvalidLineException) {
                this.invalid_line = args;
                return;
        }
        if (args instanceof MtaData.MTAServiceException) {
                this.service_error = args;
                return;
        }
        if (args) {
          if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
          }
          if (args.invalid_line !== undefined && args.invalid_line !== null) {
            this.invalid_line = args.invalid_line;
          }
          if (args.service_error !== undefined && args.service_error !== null) {
            this.service_error = args.service_error;
          }
        }
      };
MtaData.WebSocketService_subscribeToLineUpdates_result.prototype = {};
      MtaData.WebSocketService_subscribeToLineUpdates_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true) {
          var ret = input.readFieldBegin();
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid) {
            case 0:
            if (ftype == Thrift.Type.STRING) {
              this.success = input.readString().value;
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.invalid_line = new MtaData.InvalidLineException();
              this.invalid_line.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.service_error = new MtaData.MTAServiceException();
              this.service_error.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

      MtaData.WebSocketService_subscribeToLineUpdates_result.prototype.write = function(output) {
        output.writeStructBegin('WebSocketService_subscribeToLineUpdates_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRING, 0);
          output.writeString(this.success);
          output.writeFieldEnd();
        }
        if (this.invalid_line !== null && this.invalid_line !== undefined) {
          output.writeFieldBegin('invalid_line', Thrift.Type.STRUCT, 1);
          this.invalid_line.write(output);
          output.writeFieldEnd();
        }
        if (this.service_error !== null && this.service_error !== undefined) {
          output.writeFieldBegin('service_error', Thrift.Type.STRUCT, 2);
          this.service_error.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

MtaData.WebSocketService_unsubscribeFromUpdates_args = function(args) {
        this.subscription_id = null;
        if (args) {
          if (args.subscription_id !== undefined && args.subscription_id !== null) {
            this.subscription_id = args.subscription_id;
          }
        }
      };
MtaData.WebSocketService_unsubscribeFromUpdates_args.prototype = {};
      MtaData.WebSocketService_unsubscribeFromUpdates_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true) {
          var ret = input.readFieldBegin();
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid) {
            case 1:
            if (ftype == Thrift.Type.STRING) {
              this.subscription_id = input.readString().value;
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

      MtaData.WebSocketService_unsubscribeFromUpdates_args.prototype.write = function(output) {
        output.writeStructBegin('WebSocketService_unsubscribeFromUpdates_args');
        if (this.subscription_id !== null && this.subscription_id !== undefined) {
          output.writeFieldBegin('subscription_id', Thrift.Type.STRING, 1);
          output.writeString(this.subscription_id);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

MtaData.WebSocketService_unsubscribeFromUpdates_result = function(args) {
        this.service_error = null;
        if (args instanceof MtaData.MTAServiceException) {
                this.service_error = args;
                return;
        }
        if (args) {
          if (args.service_error !== undefined && args.service_error !== null) {
            this.service_error = args.service_error;
          }
        }
      };
MtaData.WebSocketService_unsubscribeFromUpdates_result.prototype = {};
      MtaData.WebSocketService_unsubscribeFromUpdates_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true) {
          var ret = input.readFieldBegin();
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid) {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.service_error = new MtaData.MTAServiceException();
              this.service_error.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

      MtaData.WebSocketService_unsubscribeFromUpdates_result.prototype.write = function(output) {
        output.writeStructBegin('WebSocketService_unsubscribeFromUpdates_result');
        if (this.service_error !== null && this.service_error !== undefined) {
          output.writeFieldBegin('service_error', Thrift.Type.STRUCT, 1);
          this.service_error.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

MtaData.WebSocketService_getActiveSubscriptions_args = function(args) {
      };
MtaData.WebSocketService_getActiveSubscriptions_args.prototype = {};
      MtaData.WebSocketService_getActiveSubscriptions_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true) {
          var ret = input.readFieldBegin();
          var ftype = ret.ftype;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          input.skip(ftype);
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

      MtaData.WebSocketService_getActiveSubscriptions_args.prototype.write = function(output) {
        output.writeStructBegin('WebSocketService_getActiveSubscriptions_args');
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

MtaData.WebSocketService_getActiveSubscriptions_result = function(args) {
        this.success = null;
        if (args) {
          if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
          }
        }
      };
MtaData.WebSocketService_getActiveSubscriptions_result.prototype = {};
      MtaData.WebSocketService_getActiveSubscriptions_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true) {
          var ret = input.readFieldBegin();
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid) {
            case 0:
            if (ftype == Thrift.Type.LIST) {
              this.success = [];
              var _rtmp356 = input.readListBegin();
              var _size55 = _rtmp356.size || 0;
              for (var _i57 = 0; _i57 < _size55; ++_i57) {
                var elem58 = null;
                elem58 = input.readString().value;
                this.success.push(elem58);
              }
              input.readListEnd();
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

      MtaData.WebSocketService_getActiveSubscriptions_result.prototype.write = function(output) {
        output.writeStructBegin('WebSocketService_getActiveSubscriptions_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.LIST, 0);
          output.writeListBegin(Thrift.Type.STRING, this.success.length);
          for (var iter59 in this.success) {
            if (this.success.hasOwnProperty(iter59)) {
              iter59 = this.success[iter59];
              output.writeString(iter59);
            }
          }
          output.writeListEnd();
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

MtaData.WebSocketServiceClient = function(input, output) {
        this.input = input;
        this.output = (!output) ? input : output;
        this.seqid = 0;
      };
      MtaData.WebSocketServiceClient.prototype = {};

      MtaData.WebSocketServiceClient.prototype.subscribeToLineUpdates = function(line_ids, update_interval_seconds, callback) {
        this.send_subscribeToLineUpdates(line_ids, update_interval_seconds, callback); 
        if (!callback) {
          return this.recv_subscribeToLineUpdates();
        }
      };

      MtaData.WebSocketServiceClient.prototype.send_subscribeToLineUpdates = function(line_ids, update_interval_seconds, callback) {
        var params = {
          line_ids: line_ids,
          update_interval_seconds: update_interval_seconds
        };
        var args = new MtaData.WebSocketService_subscribeToLineUpdates_args(params);
        try {
          this.output.writeMessageBegin('subscribeToLineUpdates', Thrift.MessageType.CALL, this.seqid);
          args.write(this.output);
          this.output.writeMessageEnd();
          if (callback) {
            var self = this;
            this.output.getTransport().flush(true, function() {
              var result = null;
              try {
                result = self.recv_subscribeToLineUpdates();
              } catch (e) {
                result = e;
              }
              callback(result);
            });
          } else {
            return this.output.getTransport().flush();
          }
        }
        catch (e) {
          if (typeof this.output.getTransport().reset === 'function') {
            this.output.getTransport().reset();
          }
          throw e;
        }
      };

      MtaData.WebSocketServiceClient.prototype.recv_subscribeToLineUpdates = function() {
        var ret = this.input.readMessageBegin();
        var mtype = ret.mtype;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new MtaData.WebSocketService_subscribeToLineUpdates_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.invalid_line) {
          throw result.invalid_line;
        }
        if (null !== result.service_error) {
          throw result.service_error;
        }
        if (null !== result.success) {
          return result.success;
        }
        throw 'subscribeToLineUpdates failed: unknown result';
      };

      MtaData.WebSocketServiceClient.prototype.unsubscribeFromUpdates = function(subscription_id, callback) {
        this.send_unsubscribeFromUpdates(subscription_id, callback); 
        if (!callback) {
        this.recv_unsubscribeFromUpdates();
        }
      };

      MtaData.WebSocketServiceClient.prototype.send_unsubscribeFromUpdates = function(subscription_id, callback) {
        var params = {
          subscription_id: subscription_id
        };
        var args = new MtaData.WebSocketService_unsubscribeFromUpdates_args(params);
        try {
          this.output.writeMessageBegin('unsubscribeFromUpdates', Thrift.MessageType.CALL, this.seqid);
          args.write(this.output);
          this.output.writeMessageEnd();
          if (callback) {
            var self = this;
            this.output.getTransport().flush(true, function() {
              var result = null;
              try {
                result = self.recv_unsubscribeFromUpdates();
              } catch (e) {
                result = e;
              }
              callback(result);
            });
          } else {
            return this.output.getTransport().flush();
          }
        }
        catch (e) {
          if (typeof this.output.getTransport().reset === 'function') {
            this.output.getTransport().reset();
          }
          throw e;
        }
      };

      MtaData.WebSocketServiceClient.prototype.recv_unsubscribeFromUpdates = function() {
        var ret = this.input.readMessageBegin();
        var mtype = ret.mtype;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new MtaData.WebSocketService_unsubscribeFromUpdates_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.service_error) {
          throw result.service_error;
        }
        return;
      };

      MtaData.WebSocketServiceClient.prototype.getActiveSubscriptions = function(callback) {
        this.send_getActiveSubscriptions(callback); 
        if (!callback) {
          return this.recv_getActiveSubscriptions();
        }
      };

      MtaData.WebSocketServiceClient.prototype.send_getActiveSubscriptions = function(callback) {
        var args = new MtaData.WebSocketService_getActiveSubscriptions_args();
        try {
          this.output.writeMessageBegin('getActiveSubscriptions', Thrift.MessageType.CALL, this.seqid);
          args.write(this.output);
          this.output.writeMessageEnd();
          if (callback) {
            var self = this;
            this.output.getTransport().flush(true, function() {
              var result = null;
              try {
                result = self.recv_getActiveSubscriptions();
              } catch (e) {
                result = e;
              }
              callback(result);
            });
          } else {
            return this.output.getTransport().flush();
          }
        }
        catch (e) {
          if (typeof this.output.getTransport().reset === 'function') {
            this.output.getTransport().reset();
          }
          throw e;
        }
      };

      MtaData.WebSocketServiceClient.prototype.recv_getActiveSubscriptions = function() {
        var ret = this.input.readMessageBegin();
        var mtype = ret.mtype;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new MtaData.WebSocketService_getActiveSubscriptions_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.success) {
          return result.success;
        }
        throw 'getActiveSubscriptions failed: unknown result';
      };
