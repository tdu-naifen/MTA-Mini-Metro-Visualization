//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

MtaData.MTAFeedService_getRealTimeFeed_args = function(args) {
      this.line_ids = null;
      if (args) {
        if (args.line_ids !== undefined && args.line_ids !== null) {
          this.line_ids = Thrift.copyList(args.line_ids, [null]);
        }
      }
    };
MtaData.MTAFeedService_getRealTimeFeed_args.prototype = {};
    MtaData.MTAFeedService_getRealTimeFeed_args.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid) {
          case 1:
          if (ftype == Thrift.Type.LIST) {
            this.line_ids = [];
            var _rtmp331 = input.readListBegin();
            var _size30 = _rtmp331.size || 0;
            for (var _i32 = 0; _i32 < _size30; ++_i32) {
              var elem33 = null;
              elem33 = input.readString().value;
              this.line_ids.push(elem33);
            }
            input.readListEnd();
          } else {
            input.skip(ftype);
          }
          break;
          case 0:
            input.skip(ftype);
            break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_getRealTimeFeed_args.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_getRealTimeFeed_args');
      if (this.line_ids !== null && this.line_ids !== undefined) {
        output.writeFieldBegin('line_ids', Thrift.Type.LIST, 1);
        output.writeListBegin(Thrift.Type.STRING, this.line_ids.length);
        for (var iter34 in this.line_ids) {
          if (this.line_ids.hasOwnProperty(iter34)) {
            iter34 = this.line_ids[iter34];
            output.writeString(iter34);
          }
        }
        output.writeListEnd();
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedService_getRealTimeFeed_result = function(args) {
      this.success = null;
      this.invalid_line = null;
      this.feed_unavailable = null;
      this.service_error = null;
      if (args instanceof MtaData.InvalidLineException) {
            this.invalid_line = args;
            return;
      }
      if (args instanceof MtaData.FeedUnavailableException) {
            this.feed_unavailable = args;
            return;
      }
      if (args instanceof MtaData.MTAServiceException) {
            this.service_error = args;
            return;
      }
      if (args) {
        if (args.success !== undefined && args.success !== null) {
          this.success = new MtaData.RealTimeFeed(args.success);
        }
        if (args.invalid_line !== undefined && args.invalid_line !== null) {
          this.invalid_line = args.invalid_line;
        }
        if (args.feed_unavailable !== undefined && args.feed_unavailable !== null) {
          this.feed_unavailable = args.feed_unavailable;
        }
        if (args.service_error !== undefined && args.service_error !== null) {
          this.service_error = args.service_error;
        }
      }
    };
MtaData.MTAFeedService_getRealTimeFeed_result.prototype = {};
    MtaData.MTAFeedService_getRealTimeFeed_result.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid) {
          case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new MtaData.RealTimeFeed();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.invalid_line = new MtaData.InvalidLineException();
            this.invalid_line.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.feed_unavailable = new MtaData.FeedUnavailableException();
            this.feed_unavailable.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          case 3:
          if (ftype == Thrift.Type.STRUCT) {
            this.service_error = new MtaData.MTAServiceException();
            this.service_error.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_getRealTimeFeed_result.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_getRealTimeFeed_result');
      if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
      }
      if (this.invalid_line !== null && this.invalid_line !== undefined) {
        output.writeFieldBegin('invalid_line', Thrift.Type.STRUCT, 1);
        this.invalid_line.write(output);
        output.writeFieldEnd();
      }
      if (this.feed_unavailable !== null && this.feed_unavailable !== undefined) {
        output.writeFieldBegin('feed_unavailable', Thrift.Type.STRUCT, 2);
        this.feed_unavailable.write(output);
        output.writeFieldEnd();
      }
      if (this.service_error !== null && this.service_error !== undefined) {
        output.writeFieldBegin('service_error', Thrift.Type.STRUCT, 3);
        this.service_error.write(output);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedService_getAvailableLines_args = function(args) {
    };
MtaData.MTAFeedService_getAvailableLines_args.prototype = {};
    MtaData.MTAFeedService_getAvailableLines_args.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        input.skip(ftype);
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_getAvailableLines_args.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_getAvailableLines_args');
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedService_getAvailableLines_result = function(args) {
      this.success = null;
      this.service_error = null;
      if (args instanceof MtaData.MTAServiceException) {
            this.service_error = args;
            return;
      }
      if (args) {
        if (args.success !== undefined && args.success !== null) {
          this.success = Thrift.copyList(args.success, [MtaData.SubwayLine]);
        }
        if (args.service_error !== undefined && args.service_error !== null) {
          this.service_error = args.service_error;
        }
      }
    };
MtaData.MTAFeedService_getAvailableLines_result.prototype = {};
    MtaData.MTAFeedService_getAvailableLines_result.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid) {
          case 0:
          if (ftype == Thrift.Type.LIST) {
            this.success = [];
            var _rtmp336 = input.readListBegin();
            var _size35 = _rtmp336.size || 0;
            for (var _i37 = 0; _i37 < _size35; ++_i37) {
              var elem38 = null;
              elem38 = new MtaData.SubwayLine();
              elem38.read(input);
              this.success.push(elem38);
            }
            input.readListEnd();
          } else {
            input.skip(ftype);
          }
          break;
          case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.service_error = new MtaData.MTAServiceException();
            this.service_error.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_getAvailableLines_result.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_getAvailableLines_result');
      if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.LIST, 0);
        output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
        for (var iter39 in this.success) {
          if (this.success.hasOwnProperty(iter39)) {
            iter39 = this.success[iter39];
            iter39.write(output);
          }
        }
        output.writeListEnd();
        output.writeFieldEnd();
      }
      if (this.service_error !== null && this.service_error !== undefined) {
        output.writeFieldBegin('service_error', Thrift.Type.STRUCT, 1);
        this.service_error.write(output);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedService_getStationsForLine_args = function(args) {
      this.line_id = null;
      if (args) {
        if (args.line_id !== undefined && args.line_id !== null) {
          this.line_id = args.line_id;
        }
      }
    };
MtaData.MTAFeedService_getStationsForLine_args.prototype = {};
    MtaData.MTAFeedService_getStationsForLine_args.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid) {
          case 1:
          if (ftype == Thrift.Type.STRING) {
            this.line_id = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
          case 0:
            input.skip(ftype);
            break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_getStationsForLine_args.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_getStationsForLine_args');
      if (this.line_id !== null && this.line_id !== undefined) {
        output.writeFieldBegin('line_id', Thrift.Type.STRING, 1);
        output.writeString(this.line_id);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedService_getStationsForLine_result = function(args) {
      this.success = null;
      this.invalid_line = null;
      this.service_error = null;
      if (args instanceof MtaData.InvalidLineException) {
            this.invalid_line = args;
            return;
      }
      if (args instanceof MtaData.MTAServiceException) {
            this.service_error = args;
            return;
      }
      if (args) {
        if (args.success !== undefined && args.success !== null) {
          this.success = Thrift.copyList(args.success, [MtaData.Station]);
        }
        if (args.invalid_line !== undefined && args.invalid_line !== null) {
          this.invalid_line = args.invalid_line;
        }
        if (args.service_error !== undefined && args.service_error !== null) {
          this.service_error = args.service_error;
        }
      }
    };
MtaData.MTAFeedService_getStationsForLine_result.prototype = {};
    MtaData.MTAFeedService_getStationsForLine_result.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid) {
          case 0:
          if (ftype == Thrift.Type.LIST) {
            this.success = [];
            var _rtmp341 = input.readListBegin();
            var _size40 = _rtmp341.size || 0;
            for (var _i42 = 0; _i42 < _size40; ++_i42) {
              var elem43 = null;
              elem43 = new MtaData.Station();
              elem43.read(input);
              this.success.push(elem43);
            }
            input.readListEnd();
          } else {
            input.skip(ftype);
          }
          break;
          case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.invalid_line = new MtaData.InvalidLineException();
            this.invalid_line.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.service_error = new MtaData.MTAServiceException();
            this.service_error.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_getStationsForLine_result.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_getStationsForLine_result');
      if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.LIST, 0);
        output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
        for (var iter44 in this.success) {
          if (this.success.hasOwnProperty(iter44)) {
            iter44 = this.success[iter44];
            iter44.write(output);
          }
        }
        output.writeListEnd();
        output.writeFieldEnd();
      }
      if (this.invalid_line !== null && this.invalid_line !== undefined) {
        output.writeFieldBegin('invalid_line', Thrift.Type.STRUCT, 1);
        this.invalid_line.write(output);
        output.writeFieldEnd();
      }
      if (this.service_error !== null && this.service_error !== undefined) {
        output.writeFieldBegin('service_error', Thrift.Type.STRUCT, 2);
        this.service_error.write(output);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedService_getActiveTrains_args = function(args) {
      this.line_id = null;
      if (args) {
        if (args.line_id !== undefined && args.line_id !== null) {
          this.line_id = args.line_id;
        }
      }
    };
MtaData.MTAFeedService_getActiveTrains_args.prototype = {};
    MtaData.MTAFeedService_getActiveTrains_args.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid) {
          case 1:
          if (ftype == Thrift.Type.STRING) {
            this.line_id = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
          case 0:
            input.skip(ftype);
            break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_getActiveTrains_args.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_getActiveTrains_args');
      if (this.line_id !== null && this.line_id !== undefined) {
        output.writeFieldBegin('line_id', Thrift.Type.STRING, 1);
        output.writeString(this.line_id);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedService_getActiveTrains_result = function(args) {
      this.success = null;
      this.invalid_line = null;
      this.feed_unavailable = null;
      this.service_error = null;
      if (args instanceof MtaData.InvalidLineException) {
            this.invalid_line = args;
            return;
      }
      if (args instanceof MtaData.FeedUnavailableException) {
            this.feed_unavailable = args;
            return;
      }
      if (args instanceof MtaData.MTAServiceException) {
            this.service_error = args;
            return;
      }
      if (args) {
        if (args.success !== undefined && args.success !== null) {
          this.success = Thrift.copyList(args.success, [MtaData.Train]);
        }
        if (args.invalid_line !== undefined && args.invalid_line !== null) {
          this.invalid_line = args.invalid_line;
        }
        if (args.feed_unavailable !== undefined && args.feed_unavailable !== null) {
          this.feed_unavailable = args.feed_unavailable;
        }
        if (args.service_error !== undefined && args.service_error !== null) {
          this.service_error = args.service_error;
        }
      }
    };
MtaData.MTAFeedService_getActiveTrains_result.prototype = {};
    MtaData.MTAFeedService_getActiveTrains_result.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid) {
          case 0:
          if (ftype == Thrift.Type.LIST) {
            this.success = [];
            var _rtmp346 = input.readListBegin();
            var _size45 = _rtmp346.size || 0;
            for (var _i47 = 0; _i47 < _size45; ++_i47) {
              var elem48 = null;
              elem48 = new MtaData.Train();
              elem48.read(input);
              this.success.push(elem48);
            }
            input.readListEnd();
          } else {
            input.skip(ftype);
          }
          break;
          case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.invalid_line = new MtaData.InvalidLineException();
            this.invalid_line.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.feed_unavailable = new MtaData.FeedUnavailableException();
            this.feed_unavailable.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          case 3:
          if (ftype == Thrift.Type.STRUCT) {
            this.service_error = new MtaData.MTAServiceException();
            this.service_error.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_getActiveTrains_result.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_getActiveTrains_result');
      if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.LIST, 0);
        output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
        for (var iter49 in this.success) {
          if (this.success.hasOwnProperty(iter49)) {
            iter49 = this.success[iter49];
            iter49.write(output);
          }
        }
        output.writeListEnd();
        output.writeFieldEnd();
      }
      if (this.invalid_line !== null && this.invalid_line !== undefined) {
        output.writeFieldBegin('invalid_line', Thrift.Type.STRUCT, 1);
        this.invalid_line.write(output);
        output.writeFieldEnd();
      }
      if (this.feed_unavailable !== null && this.feed_unavailable !== undefined) {
        output.writeFieldBegin('feed_unavailable', Thrift.Type.STRUCT, 2);
        this.feed_unavailable.write(output);
        output.writeFieldEnd();
      }
      if (this.service_error !== null && this.service_error !== undefined) {
        output.writeFieldBegin('service_error', Thrift.Type.STRUCT, 3);
        this.service_error.write(output);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedService_healthCheck_args = function(args) {
    };
MtaData.MTAFeedService_healthCheck_args.prototype = {};
    MtaData.MTAFeedService_healthCheck_args.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        input.skip(ftype);
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_healthCheck_args.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_healthCheck_args');
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedService_healthCheck_result = function(args) {
      this.success = null;
      if (args) {
        if (args.success !== undefined && args.success !== null) {
          this.success = args.success;
        }
      }
    };
MtaData.MTAFeedService_healthCheck_result.prototype = {};
    MtaData.MTAFeedService_healthCheck_result.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid) {
          case 0:
          if (ftype == Thrift.Type.BOOL) {
            this.success = input.readBool().value;
          } else {
            input.skip(ftype);
          }
          break;
          case 0:
            input.skip(ftype);
            break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_healthCheck_result.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_healthCheck_result');
      if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
        output.writeBool(this.success);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedService_getServiceStatus_args = function(args) {
    };
MtaData.MTAFeedService_getServiceStatus_args.prototype = {};
    MtaData.MTAFeedService_getServiceStatus_args.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        input.skip(ftype);
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_getServiceStatus_args.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_getServiceStatus_args');
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedService_getServiceStatus_result = function(args) {
      this.success = null;
      if (args) {
        if (args.success !== undefined && args.success !== null) {
          this.success = args.success;
        }
      }
    };
MtaData.MTAFeedService_getServiceStatus_result.prototype = {};
    MtaData.MTAFeedService_getServiceStatus_result.prototype.read = function(input) {
      input.readStructBegin();
      while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid) {
          case 0:
          if (ftype == Thrift.Type.STRING) {
            this.success = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
          case 0:
            input.skip(ftype);
            break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

    MtaData.MTAFeedService_getServiceStatus_result.prototype.write = function(output) {
      output.writeStructBegin('MTAFeedService_getServiceStatus_result');
      if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRING, 0);
        output.writeString(this.success);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

MtaData.MTAFeedServiceClient = function(input, output) {
      this.input = input;
      this.output = (!output) ? input : output;
      this.seqid = 0;
    };
    MtaData.MTAFeedServiceClient.prototype = {};

    MtaData.MTAFeedServiceClient.prototype.getRealTimeFeed = function(line_ids, callback) {
      this.send_getRealTimeFeed(line_ids, callback); 
      if (!callback) {
        return this.recv_getRealTimeFeed();
      }
    };

    MtaData.MTAFeedServiceClient.prototype.send_getRealTimeFeed = function(line_ids, callback) {
      var params = {
        line_ids: line_ids
      };
      var args = new MtaData.MTAFeedService_getRealTimeFeed_args(params);
      try {
        this.output.writeMessageBegin('getRealTimeFeed', Thrift.MessageType.CALL, this.seqid);
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_getRealTimeFeed();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
      }
      catch (e) {
        if (typeof this.output.getTransport().reset === 'function') {
          this.output.getTransport().reset();
        }
        throw e;
      }
    };

    MtaData.MTAFeedServiceClient.prototype.recv_getRealTimeFeed = function() {
      var ret = this.input.readMessageBegin();
      var mtype = ret.mtype;
      if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(this.input);
        this.input.readMessageEnd();
        throw x;
      }
      var result = new MtaData.MTAFeedService_getRealTimeFeed_result();
      result.read(this.input);
      this.input.readMessageEnd();

      if (null !== result.invalid_line) {
        throw result.invalid_line;
      }
      if (null !== result.feed_unavailable) {
        throw result.feed_unavailable;
      }
      if (null !== result.service_error) {
        throw result.service_error;
      }
      if (null !== result.success) {
        return result.success;
      }
      throw 'getRealTimeFeed failed: unknown result';
    };

    MtaData.MTAFeedServiceClient.prototype.getAvailableLines = function(callback) {
      this.send_getAvailableLines(callback); 
      if (!callback) {
        return this.recv_getAvailableLines();
      }
    };

    MtaData.MTAFeedServiceClient.prototype.send_getAvailableLines = function(callback) {
      var args = new MtaData.MTAFeedService_getAvailableLines_args();
      try {
        this.output.writeMessageBegin('getAvailableLines', Thrift.MessageType.CALL, this.seqid);
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_getAvailableLines();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
      }
      catch (e) {
        if (typeof this.output.getTransport().reset === 'function') {
          this.output.getTransport().reset();
        }
        throw e;
      }
    };

    MtaData.MTAFeedServiceClient.prototype.recv_getAvailableLines = function() {
      var ret = this.input.readMessageBegin();
      var mtype = ret.mtype;
      if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(this.input);
        this.input.readMessageEnd();
        throw x;
      }
      var result = new MtaData.MTAFeedService_getAvailableLines_result();
      result.read(this.input);
      this.input.readMessageEnd();

      if (null !== result.service_error) {
        throw result.service_error;
      }
      if (null !== result.success) {
        return result.success;
      }
      throw 'getAvailableLines failed: unknown result';
    };

    MtaData.MTAFeedServiceClient.prototype.getStationsForLine = function(line_id, callback) {
      this.send_getStationsForLine(line_id, callback); 
      if (!callback) {
        return this.recv_getStationsForLine();
      }
    };

    MtaData.MTAFeedServiceClient.prototype.send_getStationsForLine = function(line_id, callback) {
      var params = {
        line_id: line_id
      };
      var args = new MtaData.MTAFeedService_getStationsForLine_args(params);
      try {
        this.output.writeMessageBegin('getStationsForLine', Thrift.MessageType.CALL, this.seqid);
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_getStationsForLine();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
      }
      catch (e) {
        if (typeof this.output.getTransport().reset === 'function') {
          this.output.getTransport().reset();
        }
        throw e;
      }
    };

    MtaData.MTAFeedServiceClient.prototype.recv_getStationsForLine = function() {
      var ret = this.input.readMessageBegin();
      var mtype = ret.mtype;
      if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(this.input);
        this.input.readMessageEnd();
        throw x;
      }
      var result = new MtaData.MTAFeedService_getStationsForLine_result();
      result.read(this.input);
      this.input.readMessageEnd();

      if (null !== result.invalid_line) {
        throw result.invalid_line;
      }
      if (null !== result.service_error) {
        throw result.service_error;
      }
      if (null !== result.success) {
        return result.success;
      }
      throw 'getStationsForLine failed: unknown result';
    };

    MtaData.MTAFeedServiceClient.prototype.getActiveTrains = function(line_id, callback) {
      this.send_getActiveTrains(line_id, callback); 
      if (!callback) {
        return this.recv_getActiveTrains();
      }
    };

    MtaData.MTAFeedServiceClient.prototype.send_getActiveTrains = function(line_id, callback) {
      var params = {
        line_id: line_id
      };
      var args = new MtaData.MTAFeedService_getActiveTrains_args(params);
      try {
        this.output.writeMessageBegin('getActiveTrains', Thrift.MessageType.CALL, this.seqid);
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_getActiveTrains();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
      }
      catch (e) {
        if (typeof this.output.getTransport().reset === 'function') {
          this.output.getTransport().reset();
        }
        throw e;
      }
    };

    MtaData.MTAFeedServiceClient.prototype.recv_getActiveTrains = function() {
      var ret = this.input.readMessageBegin();
      var mtype = ret.mtype;
      if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(this.input);
        this.input.readMessageEnd();
        throw x;
      }
      var result = new MtaData.MTAFeedService_getActiveTrains_result();
      result.read(this.input);
      this.input.readMessageEnd();

      if (null !== result.invalid_line) {
        throw result.invalid_line;
      }
      if (null !== result.feed_unavailable) {
        throw result.feed_unavailable;
      }
      if (null !== result.service_error) {
        throw result.service_error;
      }
      if (null !== result.success) {
        return result.success;
      }
      throw 'getActiveTrains failed: unknown result';
    };

    MtaData.MTAFeedServiceClient.prototype.healthCheck = function(callback) {
      this.send_healthCheck(callback); 
      if (!callback) {
        return this.recv_healthCheck();
      }
    };

    MtaData.MTAFeedServiceClient.prototype.send_healthCheck = function(callback) {
      var args = new MtaData.MTAFeedService_healthCheck_args();
      try {
        this.output.writeMessageBegin('healthCheck', Thrift.MessageType.CALL, this.seqid);
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_healthCheck();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
      }
      catch (e) {
        if (typeof this.output.getTransport().reset === 'function') {
          this.output.getTransport().reset();
        }
        throw e;
      }
    };

    MtaData.MTAFeedServiceClient.prototype.recv_healthCheck = function() {
      var ret = this.input.readMessageBegin();
      var mtype = ret.mtype;
      if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(this.input);
        this.input.readMessageEnd();
        throw x;
      }
      var result = new MtaData.MTAFeedService_healthCheck_result();
      result.read(this.input);
      this.input.readMessageEnd();

      if (null !== result.success) {
        return result.success;
      }
      throw 'healthCheck failed: unknown result';
    };

    MtaData.MTAFeedServiceClient.prototype.getServiceStatus = function(callback) {
      this.send_getServiceStatus(callback); 
      if (!callback) {
        return this.recv_getServiceStatus();
      }
    };

    MtaData.MTAFeedServiceClient.prototype.send_getServiceStatus = function(callback) {
      var args = new MtaData.MTAFeedService_getServiceStatus_args();
      try {
        this.output.writeMessageBegin('getServiceStatus', Thrift.MessageType.CALL, this.seqid);
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_getServiceStatus();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
      }
      catch (e) {
        if (typeof this.output.getTransport().reset === 'function') {
          this.output.getTransport().reset();
        }
        throw e;
      }
    };

    MtaData.MTAFeedServiceClient.prototype.recv_getServiceStatus = function() {
      var ret = this.input.readMessageBegin();
      var mtype = ret.mtype;
      if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(this.input);
        this.input.readMessageEnd();
        throw x;
      }
      var result = new MtaData.MTAFeedService_getServiceStatus_result();
      result.read(this.input);
      this.input.readMessageEnd();

      if (null !== result.success) {
        return result.success;
      }
      throw 'getServiceStatus failed: unknown result';
    };
