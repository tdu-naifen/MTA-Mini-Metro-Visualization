//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import Int64 = require('node-int64');

declare module MtaData {
  enum Direction {
    NORTH = 1,
    SOUTH = 2,
    EAST = 3,
    WEST = 4,
    UNKNOWN = 5,
  }

  enum LineColor {
    YELLOW = 1,
    RED = 2,
    BLUE = 3,
    GREEN = 4,
    ORANGE = 5,
    PURPLE = 6,
  }

  enum MessageType {
    TRAIN_UPDATE = 1,
    STATION_UPDATE = 2,
    LINE_UPDATE = 3,
    FULL_REFRESH = 4,
    ERROR = 5,
  }

  class Coordinate {
    latitude: number;
    longitude: number;

      constructor(args?: { latitude: number; longitude: number; });
  }

  class Station {
    station_id: string;
    name: string;
    location: MtaData.Coordinate;
    line_ids: string[];
    is_terminus: boolean;
    accessibility_info?: string;

      constructor(args?: { station_id: string; name: string; location: MtaData.Coordinate; line_ids: string[]; is_terminus: boolean; accessibility_info?: string; });
  }

  class Train {
    train_id: string;
    line_id: string;
    current_position: MtaData.Coordinate;
    direction: MtaData.Direction;
    current_station_id: string;
    next_station_id?: string;
    timestamp: Int64;
    speed_mph: number;
    trip_id: string;
    delay_seconds?: number;
    line_color: MtaData.LineColor;

      constructor(args?: { train_id: string; line_id: string; current_position: MtaData.Coordinate; direction: MtaData.Direction; current_station_id: string; next_station_id?: string; timestamp: Int64; speed_mph: number; trip_id: string; delay_seconds?: number; line_color: MtaData.LineColor; });
  }

  class LineSegment {
    from_station_id: string;
    to_station_id: string;
    path_coordinates: MtaData.Coordinate[];
    line_color: MtaData.LineColor;
    distance_miles: number;

      constructor(args?: { from_station_id: string; to_station_id: string; path_coordinates: MtaData.Coordinate[]; line_color: MtaData.LineColor; distance_miles: number; });
  }

  class SubwayLine {
    line_id: string;
    name: string;
    color: MtaData.LineColor;
    stations: MtaData.Station[];
    segments: MtaData.LineSegment[];
    active_trains: MtaData.Train[];

      constructor(args?: { line_id: string; name: string; color: MtaData.LineColor; stations: MtaData.Station[]; segments: MtaData.LineSegment[]; active_trains: MtaData.Train[]; });
  }

  class RealTimeFeed {
    timestamp: Int64;
    lines: MtaData.SubwayLine[];
    total_active_trains: number;
    feed_version: string;

      constructor(args?: { timestamp: Int64; lines: MtaData.SubwayLine[]; total_active_trains: number; feed_version: string; });
  }

  class WebSocketMessage {
    type: MtaData.MessageType;
    timestamp: Int64;
    train_data?: MtaData.Train;
    station_data?: MtaData.Station;
    line_data?: MtaData.SubwayLine;
    full_data?: MtaData.RealTimeFeed;
    error_message?: string;

      constructor(args?: { type: MtaData.MessageType; timestamp: Int64; train_data?: MtaData.Train; station_data?: MtaData.Station; line_data?: MtaData.SubwayLine; full_data?: MtaData.RealTimeFeed; error_message?: string; });
  }

  class ApiResponse {
    success: boolean;
    error_message?: string;
    data?: MtaData.RealTimeFeed;
    timestamp: Int64;

      constructor(args?: { success: boolean; error_message?: string; data?: MtaData.RealTimeFeed; timestamp: Int64; });
  }

  class MTAServiceException extends Thrift.TException {
    message: string;
    error_code: number;

      constructor(args?: { message: string; error_code: number; });
  }

  class InvalidLineException extends Thrift.TException {
    message: string;
    line_id: string;

      constructor(args?: { message: string; line_id: string; });
  }

  class FeedUnavailableException extends Thrift.TException {
    message: string;
    retry_after_seconds: Int64;

      constructor(args?: { message: string; retry_after_seconds: Int64; });
  }
}