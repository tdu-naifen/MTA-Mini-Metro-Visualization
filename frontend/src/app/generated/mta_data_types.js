//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


if (typeof MtaData === 'undefined') {
  MtaData = {};
}
if (typeof module !== 'undefined' && module.exports) {
  module.exports.MtaData = MtaData;
}
MtaData.Direction = {
  '1' : 'NORTH',
  'NORTH' : 1,
  '2' : 'SOUTH',
  'SOUTH' : 2,
  '3' : 'EAST',
  'EAST' : 3,
  '4' : 'WEST',
  'WEST' : 4,
  '5' : 'UNKNOWN',
  'UNKNOWN' : 5
};
MtaData.LineColor = {
  '1' : 'YELLOW',
  'YELLOW' : 1,
  '2' : 'RED',
  'RED' : 2,
  '3' : 'BLUE',
  'BLUE' : 3,
  '4' : 'GREEN',
  'GREEN' : 4,
  '5' : 'ORANGE',
  'ORANGE' : 5,
  '6' : 'PURPLE',
  'PURPLE' : 6
};
MtaData.MessageType = {
  '1' : 'TRAIN_UPDATE',
  'TRAIN_UPDATE' : 1,
  '2' : 'STATION_UPDATE',
  'STATION_UPDATE' : 2,
  '3' : 'LINE_UPDATE',
  'LINE_UPDATE' : 3,
  '4' : 'FULL_REFRESH',
  'FULL_REFRESH' : 4,
  '5' : 'ERROR',
  'ERROR' : 5
};
MtaData.Coordinate = function(args) {
  this.latitude = null;
  this.longitude = null;
  if (args) {
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
  }
};
MtaData.Coordinate.prototype = {};
MtaData.Coordinate.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MtaData.Coordinate.prototype.write = function(output) {
  output.writeStructBegin('Coordinate');
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MtaData.Station = function(args) {
  this.station_id = null;
  this.name = null;
  this.location = null;
  this.line_ids = null;
  this.is_terminus = null;
  this.accessibility_info = null;
  if (args) {
    if (args.station_id !== undefined && args.station_id !== null) {
      this.station_id = args.station_id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new MtaData.Coordinate(args.location);
    }
    if (args.line_ids !== undefined && args.line_ids !== null) {
      this.line_ids = Thrift.copyList(args.line_ids, [null]);
    }
    if (args.is_terminus !== undefined && args.is_terminus !== null) {
      this.is_terminus = args.is_terminus;
    }
    if (args.accessibility_info !== undefined && args.accessibility_info !== null) {
      this.accessibility_info = args.accessibility_info;
    }
  }
};
MtaData.Station.prototype = {};
MtaData.Station.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.station_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new MtaData.Coordinate();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.line_ids = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString().value;
          this.line_ids.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.is_terminus = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accessibility_info = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MtaData.Station.prototype.write = function(output) {
  output.writeStructBegin('Station');
  if (this.station_id !== null && this.station_id !== undefined) {
    output.writeFieldBegin('station_id', Thrift.Type.STRING, 1);
    output.writeString(this.station_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 3);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.line_ids !== null && this.line_ids !== undefined) {
    output.writeFieldBegin('line_ids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.line_ids.length);
    for (var iter4 in this.line_ids) {
      if (this.line_ids.hasOwnProperty(iter4)) {
        iter4 = this.line_ids[iter4];
        output.writeString(iter4);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.is_terminus !== null && this.is_terminus !== undefined) {
    output.writeFieldBegin('is_terminus', Thrift.Type.BOOL, 5);
    output.writeBool(this.is_terminus);
    output.writeFieldEnd();
  }
  if (this.accessibility_info !== null && this.accessibility_info !== undefined) {
    output.writeFieldBegin('accessibility_info', Thrift.Type.STRING, 6);
    output.writeString(this.accessibility_info);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MtaData.Train = function(args) {
  this.train_id = null;
  this.line_id = null;
  this.current_position = null;
  this.direction = null;
  this.current_station_id = null;
  this.next_station_id = null;
  this.timestamp = null;
  this.speed_mph = null;
  this.trip_id = null;
  this.delay_seconds = null;
  this.line_color = null;
  if (args) {
    if (args.train_id !== undefined && args.train_id !== null) {
      this.train_id = args.train_id;
    }
    if (args.line_id !== undefined && args.line_id !== null) {
      this.line_id = args.line_id;
    }
    if (args.current_position !== undefined && args.current_position !== null) {
      this.current_position = new MtaData.Coordinate(args.current_position);
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.current_station_id !== undefined && args.current_station_id !== null) {
      this.current_station_id = args.current_station_id;
    }
    if (args.next_station_id !== undefined && args.next_station_id !== null) {
      this.next_station_id = args.next_station_id;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.speed_mph !== undefined && args.speed_mph !== null) {
      this.speed_mph = args.speed_mph;
    }
    if (args.trip_id !== undefined && args.trip_id !== null) {
      this.trip_id = args.trip_id;
    }
    if (args.delay_seconds !== undefined && args.delay_seconds !== null) {
      this.delay_seconds = args.delay_seconds;
    }
    if (args.line_color !== undefined && args.line_color !== null) {
      this.line_color = args.line_color;
    }
  }
};
MtaData.Train.prototype = {};
MtaData.Train.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.train_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.line_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.current_position = new MtaData.Coordinate();
        this.current_position.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.current_station_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.next_station_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.speed_mph = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.trip_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.delay_seconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.line_color = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MtaData.Train.prototype.write = function(output) {
  output.writeStructBegin('Train');
  if (this.train_id !== null && this.train_id !== undefined) {
    output.writeFieldBegin('train_id', Thrift.Type.STRING, 1);
    output.writeString(this.train_id);
    output.writeFieldEnd();
  }
  if (this.line_id !== null && this.line_id !== undefined) {
    output.writeFieldBegin('line_id', Thrift.Type.STRING, 2);
    output.writeString(this.line_id);
    output.writeFieldEnd();
  }
  if (this.current_position !== null && this.current_position !== undefined) {
    output.writeFieldBegin('current_position', Thrift.Type.STRUCT, 3);
    this.current_position.write(output);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 4);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.current_station_id !== null && this.current_station_id !== undefined) {
    output.writeFieldBegin('current_station_id', Thrift.Type.STRING, 5);
    output.writeString(this.current_station_id);
    output.writeFieldEnd();
  }
  if (this.next_station_id !== null && this.next_station_id !== undefined) {
    output.writeFieldBegin('next_station_id', Thrift.Type.STRING, 6);
    output.writeString(this.next_station_id);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 7);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.speed_mph !== null && this.speed_mph !== undefined) {
    output.writeFieldBegin('speed_mph', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.speed_mph);
    output.writeFieldEnd();
  }
  if (this.trip_id !== null && this.trip_id !== undefined) {
    output.writeFieldBegin('trip_id', Thrift.Type.STRING, 9);
    output.writeString(this.trip_id);
    output.writeFieldEnd();
  }
  if (this.delay_seconds !== null && this.delay_seconds !== undefined) {
    output.writeFieldBegin('delay_seconds', Thrift.Type.I32, 10);
    output.writeI32(this.delay_seconds);
    output.writeFieldEnd();
  }
  if (this.line_color !== null && this.line_color !== undefined) {
    output.writeFieldBegin('line_color', Thrift.Type.I32, 11);
    output.writeI32(this.line_color);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MtaData.LineSegment = function(args) {
  this.from_station_id = null;
  this.to_station_id = null;
  this.path_coordinates = null;
  this.line_color = null;
  this.distance_miles = null;
  if (args) {
    if (args.from_station_id !== undefined && args.from_station_id !== null) {
      this.from_station_id = args.from_station_id;
    }
    if (args.to_station_id !== undefined && args.to_station_id !== null) {
      this.to_station_id = args.to_station_id;
    }
    if (args.path_coordinates !== undefined && args.path_coordinates !== null) {
      this.path_coordinates = Thrift.copyList(args.path_coordinates, [MtaData.Coordinate]);
    }
    if (args.line_color !== undefined && args.line_color !== null) {
      this.line_color = args.line_color;
    }
    if (args.distance_miles !== undefined && args.distance_miles !== null) {
      this.distance_miles = args.distance_miles;
    }
  }
};
MtaData.LineSegment.prototype = {};
MtaData.LineSegment.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.from_station_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to_station_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.path_coordinates = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new MtaData.Coordinate();
          elem8.read(input);
          this.path_coordinates.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.line_color = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.distance_miles = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MtaData.LineSegment.prototype.write = function(output) {
  output.writeStructBegin('LineSegment');
  if (this.from_station_id !== null && this.from_station_id !== undefined) {
    output.writeFieldBegin('from_station_id', Thrift.Type.STRING, 1);
    output.writeString(this.from_station_id);
    output.writeFieldEnd();
  }
  if (this.to_station_id !== null && this.to_station_id !== undefined) {
    output.writeFieldBegin('to_station_id', Thrift.Type.STRING, 2);
    output.writeString(this.to_station_id);
    output.writeFieldEnd();
  }
  if (this.path_coordinates !== null && this.path_coordinates !== undefined) {
    output.writeFieldBegin('path_coordinates', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.path_coordinates.length);
    for (var iter9 in this.path_coordinates) {
      if (this.path_coordinates.hasOwnProperty(iter9)) {
        iter9 = this.path_coordinates[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.line_color !== null && this.line_color !== undefined) {
    output.writeFieldBegin('line_color', Thrift.Type.I32, 4);
    output.writeI32(this.line_color);
    output.writeFieldEnd();
  }
  if (this.distance_miles !== null && this.distance_miles !== undefined) {
    output.writeFieldBegin('distance_miles', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.distance_miles);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MtaData.SubwayLine = function(args) {
  this.line_id = null;
  this.name = null;
  this.color = null;
  this.stations = null;
  this.segments = null;
  this.active_trains = null;
  if (args) {
    if (args.line_id !== undefined && args.line_id !== null) {
      this.line_id = args.line_id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.color !== undefined && args.color !== null) {
      this.color = args.color;
    }
    if (args.stations !== undefined && args.stations !== null) {
      this.stations = Thrift.copyList(args.stations, [MtaData.Station]);
    }
    if (args.segments !== undefined && args.segments !== null) {
      this.segments = Thrift.copyList(args.segments, [MtaData.LineSegment]);
    }
    if (args.active_trains !== undefined && args.active_trains !== null) {
      this.active_trains = Thrift.copyList(args.active_trains, [MtaData.Train]);
    }
  }
};
MtaData.SubwayLine.prototype = {};
MtaData.SubwayLine.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.line_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.color = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.stations = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new MtaData.Station();
          elem13.read(input);
          this.stations.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.segments = [];
        var _rtmp315 = input.readListBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var elem17 = null;
          elem17 = new MtaData.LineSegment();
          elem17.read(input);
          this.segments.push(elem17);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.active_trains = [];
        var _rtmp319 = input.readListBegin();
        var _size18 = _rtmp319.size || 0;
        for (var _i20 = 0; _i20 < _size18; ++_i20) {
          var elem21 = null;
          elem21 = new MtaData.Train();
          elem21.read(input);
          this.active_trains.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MtaData.SubwayLine.prototype.write = function(output) {
  output.writeStructBegin('SubwayLine');
  if (this.line_id !== null && this.line_id !== undefined) {
    output.writeFieldBegin('line_id', Thrift.Type.STRING, 1);
    output.writeString(this.line_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.color !== null && this.color !== undefined) {
    output.writeFieldBegin('color', Thrift.Type.I32, 3);
    output.writeI32(this.color);
    output.writeFieldEnd();
  }
  if (this.stations !== null && this.stations !== undefined) {
    output.writeFieldBegin('stations', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.stations.length);
    for (var iter22 in this.stations) {
      if (this.stations.hasOwnProperty(iter22)) {
        iter22 = this.stations[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.segments !== null && this.segments !== undefined) {
    output.writeFieldBegin('segments', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.segments.length);
    for (var iter23 in this.segments) {
      if (this.segments.hasOwnProperty(iter23)) {
        iter23 = this.segments[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.active_trains !== null && this.active_trains !== undefined) {
    output.writeFieldBegin('active_trains', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.active_trains.length);
    for (var iter24 in this.active_trains) {
      if (this.active_trains.hasOwnProperty(iter24)) {
        iter24 = this.active_trains[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MtaData.RealTimeFeed = function(args) {
  this.timestamp = null;
  this.lines = null;
  this.total_active_trains = null;
  this.feed_version = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.lines !== undefined && args.lines !== null) {
      this.lines = Thrift.copyList(args.lines, [MtaData.SubwayLine]);
    }
    if (args.total_active_trains !== undefined && args.total_active_trains !== null) {
      this.total_active_trains = args.total_active_trains;
    }
    if (args.feed_version !== undefined && args.feed_version !== null) {
      this.feed_version = args.feed_version;
    }
  }
};
MtaData.RealTimeFeed.prototype = {};
MtaData.RealTimeFeed.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.lines = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = new MtaData.SubwayLine();
          elem28.read(input);
          this.lines.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.total_active_trains = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.feed_version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MtaData.RealTimeFeed.prototype.write = function(output) {
  output.writeStructBegin('RealTimeFeed');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.lines !== null && this.lines !== undefined) {
    output.writeFieldBegin('lines', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.lines.length);
    for (var iter29 in this.lines) {
      if (this.lines.hasOwnProperty(iter29)) {
        iter29 = this.lines[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.total_active_trains !== null && this.total_active_trains !== undefined) {
    output.writeFieldBegin('total_active_trains', Thrift.Type.I32, 3);
    output.writeI32(this.total_active_trains);
    output.writeFieldEnd();
  }
  if (this.feed_version !== null && this.feed_version !== undefined) {
    output.writeFieldBegin('feed_version', Thrift.Type.STRING, 4);
    output.writeString(this.feed_version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MtaData.WebSocketMessage = function(args) {
  this.type = null;
  this.timestamp = null;
  this.train_data = null;
  this.station_data = null;
  this.line_data = null;
  this.full_data = null;
  this.error_message = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.train_data !== undefined && args.train_data !== null) {
      this.train_data = new MtaData.Train(args.train_data);
    }
    if (args.station_data !== undefined && args.station_data !== null) {
      this.station_data = new MtaData.Station(args.station_data);
    }
    if (args.line_data !== undefined && args.line_data !== null) {
      this.line_data = new MtaData.SubwayLine(args.line_data);
    }
    if (args.full_data !== undefined && args.full_data !== null) {
      this.full_data = new MtaData.RealTimeFeed(args.full_data);
    }
    if (args.error_message !== undefined && args.error_message !== null) {
      this.error_message = args.error_message;
    }
  }
};
MtaData.WebSocketMessage.prototype = {};
MtaData.WebSocketMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.train_data = new MtaData.Train();
        this.train_data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.station_data = new MtaData.Station();
        this.station_data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.line_data = new MtaData.SubwayLine();
        this.line_data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.full_data = new MtaData.RealTimeFeed();
        this.full_data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.error_message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MtaData.WebSocketMessage.prototype.write = function(output) {
  output.writeStructBegin('WebSocketMessage');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.train_data !== null && this.train_data !== undefined) {
    output.writeFieldBegin('train_data', Thrift.Type.STRUCT, 3);
    this.train_data.write(output);
    output.writeFieldEnd();
  }
  if (this.station_data !== null && this.station_data !== undefined) {
    output.writeFieldBegin('station_data', Thrift.Type.STRUCT, 4);
    this.station_data.write(output);
    output.writeFieldEnd();
  }
  if (this.line_data !== null && this.line_data !== undefined) {
    output.writeFieldBegin('line_data', Thrift.Type.STRUCT, 5);
    this.line_data.write(output);
    output.writeFieldEnd();
  }
  if (this.full_data !== null && this.full_data !== undefined) {
    output.writeFieldBegin('full_data', Thrift.Type.STRUCT, 6);
    this.full_data.write(output);
    output.writeFieldEnd();
  }
  if (this.error_message !== null && this.error_message !== undefined) {
    output.writeFieldBegin('error_message', Thrift.Type.STRING, 7);
    output.writeString(this.error_message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MtaData.ApiResponse = function(args) {
  this.success = null;
  this.error_message = null;
  this.data = null;
  this.timestamp = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error_message !== undefined && args.error_message !== null) {
      this.error_message = args.error_message;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new MtaData.RealTimeFeed(args.data);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
MtaData.ApiResponse.prototype = {};
MtaData.ApiResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error_message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new MtaData.RealTimeFeed();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MtaData.ApiResponse.prototype.write = function(output) {
  output.writeStructBegin('ApiResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error_message !== null && this.error_message !== undefined) {
    output.writeFieldBegin('error_message', Thrift.Type.STRING, 2);
    output.writeString(this.error_message);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MtaData.MTAServiceException = function(args) {
  this.message = null;
  this.error_code = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.error_code !== undefined && args.error_code !== null) {
      this.error_code = args.error_code;
    }
  }
};
Thrift.inherits(MtaData.MTAServiceException, Thrift.TException);
MtaData.MTAServiceException.prototype.name = 'MTAServiceException';
MtaData.MTAServiceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.error_code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MtaData.MTAServiceException.prototype.write = function(output) {
  output.writeStructBegin('MTAServiceException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.error_code !== null && this.error_code !== undefined) {
    output.writeFieldBegin('error_code', Thrift.Type.I32, 2);
    output.writeI32(this.error_code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MtaData.InvalidLineException = function(args) {
  this.message = null;
  this.line_id = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.line_id !== undefined && args.line_id !== null) {
      this.line_id = args.line_id;
    }
  }
};
Thrift.inherits(MtaData.InvalidLineException, Thrift.TException);
MtaData.InvalidLineException.prototype.name = 'InvalidLineException';
MtaData.InvalidLineException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.line_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MtaData.InvalidLineException.prototype.write = function(output) {
  output.writeStructBegin('InvalidLineException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.line_id !== null && this.line_id !== undefined) {
    output.writeFieldBegin('line_id', Thrift.Type.STRING, 2);
    output.writeString(this.line_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MtaData.FeedUnavailableException = function(args) {
  this.message = null;
  this.retry_after_seconds = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.retry_after_seconds !== undefined && args.retry_after_seconds !== null) {
      this.retry_after_seconds = args.retry_after_seconds;
    }
  }
};
Thrift.inherits(MtaData.FeedUnavailableException, Thrift.TException);
MtaData.FeedUnavailableException.prototype.name = 'FeedUnavailableException';
MtaData.FeedUnavailableException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.retry_after_seconds = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MtaData.FeedUnavailableException.prototype.write = function(output) {
  output.writeStructBegin('FeedUnavailableException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.retry_after_seconds !== null && this.retry_after_seconds !== undefined) {
    output.writeFieldBegin('retry_after_seconds', Thrift.Type.I64, 2);
    output.writeI64(this.retry_after_seconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

