//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { mta_data } from "./mta_data_types";

declare module "./mta_data_types" {
    module mta_data {

      class MTAFeedServiceClient {
        input: Thrift.TJSONProtocol;
        output: Thrift.TJSONProtocol;
        seqid: number;

        constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

        /**
         * Get real-time feed data for specific subway lines
         * @param line_ids: List of line IDs (e.g., ["N", "Q", "R", "W"])
         * @returns: Real-time feed data for requested lines
         * @throws: InvalidLineException if line not supported
         * @throws: FeedUnavailableException if MTA feed is down
         * @throws: MTAServiceException for other errors
         */
        getRealTimeFeed(line_ids: string[]): MtaData.RealTimeFeed;

        /**
         * Get real-time feed data for specific subway lines
         * @param line_ids: List of line IDs (e.g., ["N", "Q", "R", "W"])
         * @returns: Real-time feed data for requested lines
         * @throws: InvalidLineException if line not supported
         * @throws: FeedUnavailableException if MTA feed is down
         * @throws: MTAServiceException for other errors
         */
        getRealTimeFeed(line_ids: string[], callback?: (data: MtaData.RealTimeFeed)=>void): void;

        /**
         * Get all available subway lines with their static information
         * @returns: List of subway lines with stations and segments
         * @throws: MTAServiceException for service errors
         */
        getAvailableLines(): MtaData.SubwayLine[];

        /**
         * Get all available subway lines with their static information
         * @returns: List of subway lines with stations and segments
         * @throws: MTAServiceException for service errors
         */
        getAvailableLines(callback?: (data: MtaData.SubwayLine[])=>void): void;

        /**
         * Get station information for a specific line
         * @param line_id: Line ID (e.g., "N", "Q", "R", "W")
         * @returns: List of stations for the line
         * @throws: InvalidLineException if line not supported
         * @throws: MTAServiceException for other errors
         */
        getStationsForLine(line_id: string): MtaData.Station[];

        /**
         * Get station information for a specific line
         * @param line_id: Line ID (e.g., "N", "Q", "R", "W")
         * @returns: List of stations for the line
         * @throws: InvalidLineException if line not supported
         * @throws: MTAServiceException for other errors
         */
        getStationsForLine(line_id: string, callback?: (data: MtaData.Station[])=>void): void;

        /**
         * Get active trains for a specific line
         * @param line_id: Line ID (e.g., "N", "Q", "R", "W")
         * @returns: List of active trains on the line
         * @throws: InvalidLineException if line not supported
         * @throws: FeedUnavailableException if MTA feed is down
         * @throws: MTAServiceException for other errors
         */
        getActiveTrains(line_id: string): MtaData.Train[];

        /**
         * Get active trains for a specific line
         * @param line_id: Line ID (e.g., "N", "Q", "R", "W")
         * @returns: List of active trains on the line
         * @throws: InvalidLineException if line not supported
         * @throws: FeedUnavailableException if MTA feed is down
         * @throws: MTAServiceException for other errors
         */
        getActiveTrains(line_id: string, callback?: (data: MtaData.Train[])=>void): void;

        /**
         * Health check for the service
         * @returns: True if service is healthy
         */
        healthCheck(): boolean;

        /**
         * Health check for the service
         * @returns: True if service is healthy
         */
        healthCheck(callback?: (data: boolean)=>void): void;

        /**
         * Get service status information
         * @returns: Service status and feed information
         */
        getServiceStatus(): string;

        /**
         * Get service status information
         * @returns: Service status and feed information
         */
        getServiceStatus(callback?: (data: string)=>void): void;
      }
    }
}
