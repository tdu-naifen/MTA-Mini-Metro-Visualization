//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { mta_data } from "./mta_data_types";

declare module "./mta_data_types" {
      module mta_data {

        class WebSocketServiceClient {
          input: Thrift.TJSONProtocol;
          output: Thrift.TJSONProtocol;
          seqid: number;

          constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

          /**
           * Start real-time updates for specific lines
           * @param line_ids: List of line IDs to subscribe to
           * @param update_interval_seconds: Update frequency in seconds (default: 10)
           * @returns: Subscription ID for managing the subscription
           * @throws: InvalidLineException if line not supported
           * @throws: MTAServiceException for other errors
           */
          subscribeToLineUpdates(line_ids: string[], update_interval_seconds: number): string;

          /**
           * Start real-time updates for specific lines
           * @param line_ids: List of line IDs to subscribe to
           * @param update_interval_seconds: Update frequency in seconds (default: 10)
           * @returns: Subscription ID for managing the subscription
           * @throws: InvalidLineException if line not supported
           * @throws: MTAServiceException for other errors
           */
          subscribeToLineUpdates(line_ids: string[], update_interval_seconds: number, callback?: (data: string)=>void): void;

          /**
           * Stop real-time updates for a subscription
           * @param subscription_id: ID returned from subscribeToLineUpdates
           * @throws: MTAServiceException for service errors
           */
          unsubscribeFromUpdates(subscription_id: string): void;

          /**
           * Stop real-time updates for a subscription
           * @param subscription_id: ID returned from subscribeToLineUpdates
           * @throws: MTAServiceException for service errors
           */
          unsubscribeFromUpdates(subscription_id: string, callback?: (data: void)=>void): void;

          /**
           * Get active subscription information
           * @returns: List of active subscription IDs
           */
          getActiveSubscriptions(): string[];

          /**
           * Get active subscription information
           * @returns: List of active subscription IDs
           */
          getActiveSubscriptions(callback?: (data: string[])=>void): void;
        }
      }
}
